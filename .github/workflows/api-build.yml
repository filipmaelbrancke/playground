name: Rust API

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.6.2
  SQLX_FEATURES: "rustls,postgres"

jobs:
#  build:
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v3
#    - name: Build
#      run: cargo build --verbose --manifest-path rust/api/Cargo.toml
#    - name: Run tests
#      run: cargo test --verbose --manifest-path rust/api/Cargo.toml
  
  
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Check-out code
        uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Smart caching for Rust/Cargo
        uses: Swatinem/rust-cache@v2
        with: 
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run:
            cargo install sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features ${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked
            # The --locked flag can be used to force Cargo to use the packaged Cargo.lock file if it is available. 
            # This may be useful for ensuring reproducible builds, to use the exact same set of dependencies that were available when the package was published. 
            # It may also be useful if a newer version of a dependency is published that no longer builds on your system, or has other problems
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - name: Migrate database
        run: SKIP_DOCKER=true ./rust/api/scripts/init_db.sh
      - name: Run tests
        run: cargo test --verbose --manifest-path rust/api/Cargo.toml
        
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check --verbose --manifest-path rust/api/Cargo.toml
        
#  clippy:
#    name: Clippy
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: dtolnay/rust-toolchain@stable
#        with:
#          components: clippy
#      - uses: Swatinem/rust-cache@v2
#      - name: Linting
#        run: cargo clippy --verbose --manifest-path rust/api/Cargo.toml -- -D warnings
